var period = 2m

var every = 60s
//Global Counters A
var devicehealth1 = batch
    |query('''SELECT difference(last("software_for_AHO")) as "dh_software_for_AHO" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_software_for_AHO")
        .as('dh_software_for_AHO')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_software_for_AHO')
        .precision('s')

var devicehealth2 = batch
    |query('''SELECT difference(last("total_number_of_dfa")) as "dh_total_number_of_dfa" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_total_number_of_dfa")
        .as('dh_total_number_of_dfa')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_total_number_of_dfa')
        .precision('s')

var devicehealth3 = batch
    |query('''SELECT difference(last("_Device_management_session_allowed")) as "dh_Device_management_session_allowed" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_Device_management_session_allowed")
        .as('dh_Device_management_session_allowed')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_Device_management_session_allowed')
        .precision('s')

var devicehealth4 = batch
    |query('''SELECT difference(last("HA_path-monitoring_packets_sent")) as "dh_HA_path-monitoring_packets_sent" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_HA_path-monitoring_packets_sent")
        .as('dh_HA_path-monitoring_packets_sent')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_HA_path-monitoring_packets_sent')
        .precision('s')

var devicehealth5 = batch
    |query('''SELECT difference(last("total_requests_to_FPGA_for_AHO")) as "dh_total_requests_to_FPGA_for_AHO" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_total_requests_to_FPGA_for_AHO")
        .as('dh_total_requests_to_FPGA_for_AHO')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_total_requests_to_FPGA_for_AHO')
        .precision('s')

var devicehealth6 = batch
    |query('''SELECT difference(last("total_requests_to_FPGA_for_DFA")) as "dh_total_requests_to_FPGA_for_DFA" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_total_requests_to_FPGA_for_DFA")
        .as('dh_total_requests_to_FPGA_for_DFA')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_total_requests_to_FPGA_for_DFA')
        .precision('s')

var devicehealth7 = batch
    |query('''SELECT difference(last("packets_held_because_of_requests_to_FPGA")) as "dh_packets_held_because_of_requests_to_FPGA" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_packets_held_because_of_requests_to_FPGA")
        .as('dh_packets_held_because_of_requests_to_FPGA')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_packets_held_because_of_requests_to_FPGA')
        .precision('s')

var devicehealth8 = batch
    |query('''SELECT difference(last("Packets_dropped-IP_TTL_reaches_zero")) as "dh_packets_dropped-IP_TTL_reaches_zero" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_packets_dropped-IP_TTL_reaches_zero")
        .as('dh_packets_dropped-IP_TTL_reaches_zero')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_packets_dropped-IP_TTL_reaches_zero')
        .precision('s')

var devicehealth9 = batch
    |query('''SELECT difference(last("Session_metering")) as "dh_Session_metering" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_Session_metering")
        .as('dh_Session_metering')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_Session_metering')
        .precision('s')

var devicehealth10 = batch
    |query('''SELECT difference(last("Device_management_session_denied")) as "dh_Device_management_session_denied" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_Device_management_session_denied")
        .as('dh_Device_management_session_denied')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_Device_management_session_denied')
        .precision('s')

var devicehealth11 = batch
    |query('''SELECT difference(last("unknown_application_to_control_plane")) as "dh_unknown_application_to_control_plane" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_unknown_application_to_control_plane")
        .as('dh_unknown_application_to_control_plane')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_unknown_application_to_control_plane')
        .precision('s')

//Global Counters B

var devicehealth12 = batch
    |query('''SELECT difference(last("Packet_allocation_error")) as "dh_Packet_allocation_error" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_Packet_allocation_error")
        .as('dh_Packet_allocation_error')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_Packet_allocation_error')
        .precision('s')

var devicehealth13 = batch
    |query('''SELECT difference(last("IP_fragmentation_error")) as "dh_IP_fragmentation_error" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_IP_fragmentation_error")
        .as('dh_IP_fragmentation_error')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_IP_fragmentation_error')
        .precision('s')

var devicehealth14 = batch
    |query('''SELECT difference(last("IP_fragments_received")) as "dh_IP_fragments_received" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_IP_fragments_received")
        .as('dh_IP_fragments_received')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_IP_fragments_received')
        .precision('s')

var devicehealth15 = batch
    |query('''SELECT difference(last("wqe_allocation_failure_in_tcp")) as "dh_wqe_allocation_failure_in_tcp" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_wqe_allocation_failure_in_tcp")
        .as('dh_wqe_allocation_failure_in_tcp')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_wqe_allocation_failure_in_tcp')
        .precision('s')

var devicehealth16 = batch
    |query('''SELECT difference(last("session_denied_failure_tcp_reassembly")) as "dh_session_denied_failure_tcp_reassembly" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_session_denied_failure_tcp_reassembly")
        .as('dh_session_denied_failure_tcp_reassembly')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_session_denied_failure_tcp_reassembly')
        .precision('s')

var devicehealth17 = batch
    |query('''SELECT difference(last("out-of-window_packets_dropped")) as "dh_out-of-window_packets_dropped" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_out-of-window_packets_dropped")
        .as('dh_out-of-window_packets_dropped')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_out-of-window_packets_dropped')
        .precision('s')

var devicehealth18 = batch
    |query('''SELECT difference(last("packets_dropped_failure_tcp_reassembly")) as "dh_packets_dropped_failure_tcp_reassembly" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_packets_dropped_failure_tcp_reassembly")
        .as('dh_packets_dropped_failure_tcp_reassembly')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_packets_dropped_failure_tcp_reassembly')
        .precision('s')

var devicehealth19 = batch
    |query('''SELECT difference(last("panFlowActionClose")) as "dh_panFlowActionClose" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_panFlowActionClose")
        .as('dh_panFlowActionClose')
    //    .tags('panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_panFlowActionClose')
        .precision('s')

var devicehealth20 = batch
    |query('''SELECT difference(last("panFlowActionReset")) as "dh_panFlowActionReset" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_panFlowActionReset")
        .as('dh_panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_panFlowActionReset')
        .precision('s')

var devicehealth21 = batch
    |query('''SELECT difference(last("panFlowTcpNonSyn")) as "dh_panFlowTcpNonSyn" FROM "telegraf"."autogen"."Base Metrics" WHERE time > now() - 2m GROUP BY time(5s) fill(none)''')
        .period(period)
        .every(every)
        .groupBy(time(5s))
    |eval(lambda: "dh_panFlowTcpNonSyn")
        .as('dh_panFlowTcpNonSyn')
    // |delete()
    //    .field('dh_panFlowActionReset')
    |influxDBOut()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('CounterTest1')
        .tag('counter', 'dh_panFlowTcpNonSyn')
        .precision('s')
